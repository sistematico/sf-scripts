#!/usr/bin/env bash
#
# Arquivo: sf-laravel-breeze
# DescriÃ§Ã£o: Scaffolding de um projeto usando o Laravel & Vite.js
#
# Mais um script feito com ðŸ’™ por "Lucas SaliÃ©s Brum" <lucas@archlinux.com.br>
# Demo: https://www.gettr.com/post/pgjgwb394b
# 
# Criado em:  23/09/2021 01:33:12
# Atualizado: 05/05/2022 13:49:29
#
# ReferÃªncia de cores:
# FG: reset = 0, black = 30, red = 31, green = 32, yellow = 33, blue = 34, magenta = 35, cyan = 36, white = 37
# BG: reset = 0, black = 40, red = 41, green = 42, yellow = 43, blue = 44, magenta = 45, cyan = 46, white=47

NPM="npm"
PROJECT="laravel-breeze"
SSR="--ssr"
TEAMS="" # --teams
LAUNCH="true"
UPGRADE="true"
TMUX_SESSION="Breeze"
EDITOR="code"
BROWSER="firefox"
URL="https://raw.githubusercontent.com/sistematico/sf-scripts/main/breeze"
COMMON="https://raw.githubusercontent.com/sistematico/sf-scripts/main/common"

command -v dialog &> /dev/null || (echo -e "O programa \e[1;31mdialog\e[0m nÃ£o estÃ¡ instalado, instale-o primeiro." && exit)
command -v php &> /dev/null || (echo -e "O programa \e[1;31mphp\e[0m nÃ£o estÃ¡ instalado, instale-o primeiro." && exit)
command -v ${NPM} &> /dev/null || (echo -e "O programa \e[1;31m${NPM}\e[0m nÃ£o estÃ¡ instalado, instale-o primeiro." && exit)
command -v composer &> /dev/null || (echo -e "O programa \e[1;31mcomposer\e[0m nÃ£o estÃ¡ instalado, instale-o primeiro." && exit)

version() {
    echo "$(basename $0) v0.1b"
    exit 0
}

help() {
    echo "Uso: $(basename $0) -p nomedoprojeto [-l|-nl] [-u|-nu] -h -v"
    exit 0
}

upgrade() {
    read -p "Deseja atualizar o composer, laravel installer e ${NPM}? [s/N]: " -t 10 response
    [[ "$response" =~ ^([yY]|[sS])$ ]] || return

    echo -e "[\e[1;35m*\e[0m] Upgrading Composer..."
    sudo composer self-update --no-interaction --quiet 2> /dev/null
    echo -e "[\e[1;35m*\e[0m] Upgrading Larave Installer..."
    sudo composer global require laravel/installer --no-interaction --quiet 2> /dev/null
    echo -e "[\e[1;35m*\e[0m] Upgrading pnpm..."
    sudo pnpm add -g pnpm 1> /dev/null 2> /dev/null
}

launch() {
    \tmux has-session -t $TMUX_SESSION 2>/dev/null
    if [ $? != 0 ]; then
        \tmux kill-session -t $TMUX_SESSION
    fi

    \tmux new-session -d -s $TMUX_SESSION 2>/dev/null
    
    \tmux new-window -t $TMUX_SESSION -n artisan 
    \tmux new-window -t $TMUX_SESSION -n npm 

    \tmux send-keys -t $TMUX_SESSION:artisan "php artisan serve" ENTER
    \tmux send-keys -t $TMUX_SESSION:npm "$NPM dev" ENTER

    \tmux detach -s $TMUX_SESSION

    $BROWSER http://localhost:8000
}

build() {
    composer install

    rm -rf node_modules package-lock.json
    
    $NPM install 1> /dev/null 2> /dev/null 
    $NPM run dev

    php artisan migrate:fresh --seed --force -q
    php artisan key:generate
    php artisan storage:link
}

setup() {
    [ ! -f ${PROJECT}/artisan ] && laravel new "$PROJECT"

    cd "$PROJECT"

    answer=$(dialog --stdout --keep-tite \
        --backtitle "Laravel Breeze" \
        --title "Laravel Breeze Config Files" \
        --checklist "Escolha as configs que deseja instalar:" 17 45 50 \
        "Visual Studio Code" "" ON \
        "Ansible"            "" ON \
        "Github WorkFlows"   "" ON \
        "Laravel .env"       "" ON \
        ".gitignore"         "" ON \
        "Prettier"           "" ON \
        --output-fd 1)


    test -f database/database.sqlite || touch database/database.sqlite

    if [[ $answer =~ ".gitignore" ]]; then
        # .gitignore
        test -f .gitignore || \
            curl -sL -o .gitignore \
            $COMMON/gitignore
    fi

    if [[ $answer =~ "Prettier" ]]; then
        # Prettier
        test -f .prettierrc.json || \
            curl -sL -o .prettierrc.json \
            $COMMON/.prettierrc.json
    fi

    if [[ $answer =~ "Visual" ]]; then
        # VSCode Settings
        test -d .vscode || /usr/bin/mkdir .vscode

        test -f .vscode/settings.json || \
            curl -sL -o .vscode/settings.json \
            $COMMON/settings.json

        # VSCode Tasks
        test -f .vscode/tasks.json || \
            curl -sL -o .vscode/tasks.json \
            $URL/tasks.json
    fi

    # Ansible
    if [[ $answer =~ "Ansible" ]]; then
        test -f ansible.sh || \
            curl -sL -o ansible.sh \
            $COMMON/ansible.sh

        chmod +x ansible.sh
    
        test -f ansible.yml || \
            curl -sL -o ansible.yml \
            $URL/ansible.yml
    fi

    if [[ $answer =~ "Github" ]]; then
        # Github Workflows
        test -d .github/workflows || /usr/bin/mkdir -p .github/workflows

        test -f .github/workflows/jetstream.yml || \
            curl -sL -o .github/workflows/jetstream.yml \
            $URL/jetstream.yml
    fi

    if [[ $answer =~ "Laravel" ]]; then
        # Laravel .env
        test -f .env || \
            curl -sL -o .env \
            $URL/.env

        # Laravel .env.example
        test -f .env.example || \
            curl -sL -o .env.example \
            $URL/.env.example
    fi

    if [[ $answer =~ "Laravel" ]]; then
        # Build Script
        test -f breeze.sh || \
            curl -sL -o breeze.sh \
            $URL/breeze.sh

        chmod +x breeze.sh
    fi

    composer require laravel/jetstream
    php artisan jetstream:install inertia $SSR $TEAMS

    build
}

[ "$UPGRADE" == "true" ] && upgrade
setup
[ "$LAUNCH" == "true" ] && launch